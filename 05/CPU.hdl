// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
    //1  1  1  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    And(a=instruction[15],b=true,out=instructionC);
    Not(in=instructionC,out=instructionA);
    
    //calculate inA and loadA
    And(a=instructionC,b=instruction[5],out=insCAndD);
    Or(a=instructionA,b=insCAndD,out=loadA);
    Mux16(a=ALUout,b=instruction,sel=instructionA,out=inA);
    
    //calculate loadD
    And(a=instructionC,b=instruction[4],out=loadD);
    
    //A and D registers
    ARegister(in=inA,load=loadA,out=outA,out[0..14]=addressM);
    DRegister(in=inD,load=loadD,out=outD);
    
    //calculate y input of ALU 
    Mux16(a=outA,b=inM,sel=instruction[12],out=aluouty);
    ALU(x=outD,y=aluouty,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=inD,out=ALUout,zr=zrALU,ng=ngALU);
    
    //calculate output of ALU is positive
    Not(in=zrALU,out=notzr);
    Not(in=ngALU,out=notng);
    And(a=notzr,b=notng,out=zrandng);
    
    //caculate loadpc
    And(a=instruction[1],b=zrALU,out=zrand);
    And(a=instruction[2],b=ngALU,out=ngand);
    And(a=instruction[0],b=zrandng,out=psand);
    
    And(a=instructionC,b=zrand,out=jumpzr);
    And(a=instructionC,b=ngand,out=jumpng);
    And(a=instructionC,b=psand,out=jumpps);
    Or(a=jumpzr,b=jumpng,out=zrorng);
    Or(a=zrorng,b=jumpps,out=loadpc);
    
    PC(in=outA,load=loadpc,inc=true,reset=reset,out[0..14]=pc);
    //calculate writeM
    And(a=instructionC,b=instruction[3],out=writeM);
    
}
